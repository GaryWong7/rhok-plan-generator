<!-- Collapsible Force Layout -->
<!-- http://bl.ocks.org/mbostock/1093130 -->
<style type="text/css">
  line.link {
    fill: none;
    stroke: #9ecae1;
    stroke-width: 1.5px;
  }
  div#chart {
    border: rgb(211, 211, 211) 1px solid;
  }
  .node circle {
    cursor: pointer;
    stroke: #3182bd;
    stroke-width: 1.5px;
  }
  .node text {
    font: 18px sans-serif;
    pointer-events: none;
    text-anchor: middle;
  }
  .view_node text {
    font: 20px sans-serif;
  }
  .root_node text {
    stroke: #176E9B;
    fill: #176E9B;
    font: 20px sans-serif;
  }
/*  .postcode_node text {
    text-anchor: right;
  }
*/</style>

<script type="text/javascript">

  function force_directed() {

    d3.select("#chart").selectAll('svg').remove();

    var width = 960,
        height = 800,
        root;

    var force = d3.layout.force()
        .linkDistance(200)
        .charge(-670)
        .gravity(.05)
        .size([width, height])
        .on("tick", tick);

    var svg = d3.select("#chart").append("svg")
        .attr("width", width)
        .attr("height", height);

    var link = svg.selectAll(".link"),
        node = svg.selectAll(".node");

    d3.json("home/visualisation.json", function(error, json) {
      root = json;
      update();

      // Initialize the display to show a few nodes.
      // from: http://stackoverflow.com/questions/17504136/starting-d3-force-layout-collapsed-text-labels-duplicating
      function collapseAll(d) {
        if (d.children) {
          d.children.forEach(collapseAll);
          toggle(d);
        }
      }
      root.children.forEach(collapseAll);
      update(root);
    });

    function update() {
      var nodes = flatten(root),
      links = d3.layout.tree().links(nodes);

      // Restart the force layout.
      force
          .nodes(nodes)
                  .linkDistance(200)
        .charge(-670)
        .gravity(.05)

              // .distance(100)
              // .charge(-670)
          .links(links)
          .start();

      // Update nodes.
      node = node.data(nodes, function(d) { return d.id; });

      node.exit().remove();

      var nodeEnter = node.enter().append("g")
          .attr("class", node_class)
          .on("click", toggle)
          .call(force.drag);

      nodeEnter.append("circle")
          .attr("r", function(d) { return d.size * 3 });

      nodeEnter.append("text")
          .attr("dy", ".35em")
          .text(function(d) { return d.name; });

      node.select("circle")
          .style("fill", color);

      // Update links.
      link = link.data(links, function(d) { return d.target.id; });

      link.exit().remove();

      link.enter().insert("line", ".node")
          .attr("class", "link");

    }

    function tick() {

      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

    }

    function color(d) {
      if (d.root_node == true) {
        return "#C2DEFC";
      }
      if (d.view_node == true) {
        return "#fd8d3c";
      }
      if (d.postcode_node == true) {
        return d.children ? "#C8B3E0" : "#AF64FF";
      }
      return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#E69B9B";
    }

    function node_class(d) {
      if (d.root_node == true) {
        return "node root_node";
      }
      if (d.view_node == true) {
        return "node view_node";
      }
      if (d.postcode_node == true) {
        return "node postcode_node";
      } else {
        return "node";
      }
    }

    // Toggle children on click.
    function toggle(d) {
      // if (d3.event.defaultPrevented) return; // ignore drag
      if (d.name == 'view!') {
        viewPlan(d);
      }
      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }
      update();
    }


    // Returns a list of all nodes under the root.
    function flatten(root) {
      var nodes = [], i = 0;

      function recurse(node) {
        if (node.children) node.children.forEach(recurse);
        if (!node.id) node.id = ++i;
        nodes.push(node);
      }

      recurse(root);
      return nodes.reverse(); // to control the z-indexes (done in order of append)
    }

    function viewPlan(d) {
      window.location = "/plans/" + d.guid + "/show";
    }
  }

</script>
